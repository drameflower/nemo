<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.netease.nemo.entlive.mapper.OrderSongMapper">
  <resultMap id="BaseResultMap" type="com.netease.nemo.entlive.model.po.OrderSong">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="live_record_id" jdbcType="BIGINT" property="liveRecordId" />
    <result column="room_archive_id" jdbcType="VARCHAR" property="roomArchiveId" />
    <result column="room_uuid" jdbcType="VARCHAR" property="roomUuid" />
    <result column="user_uuid" jdbcType="VARCHAR" property="userUuid" />
    <result column="song_id" jdbcType="VARCHAR" property="songId" />
    <result column="song_name" jdbcType="VARCHAR" property="songName" />
    <result column="song_cover" jdbcType="VARCHAR" property="songCover" />
    <result column="singer" jdbcType="VARCHAR" property="singer" />
    <result column="singer_cover" jdbcType="VARCHAR" property="singerCover" />
    <result column="song_time" jdbcType="BIGINT" property="songTime" />
    <result column="channel" jdbcType="TINYINT" property="channel" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="set_top_time" jdbcType="BIGINT" property="setTopTime" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id,live_record_id, room_archive_id, room_uuid, user_uuid, song_id, song_name, song_cover,
    singer, singer_cover, song_time, channel, status, set_top_time, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from order_song
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from order_song
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.netease.nemo.entlive.model.po.OrderSong" useGeneratedKeys="true">
      insert into order_song (live_record_id, room_archive_id, room_uuid,
      user_uuid, song_id, song_name,
      song_cover, singer, singer_cover,
      song_time, channel, status,
      set_top_time, create_time, update_time
      )
      values (#{liveRecordId,jdbcType=BIGINT}, #{roomArchiveId,jdbcType=VARCHAR},
      #{roomUuid,jdbcType=VARCHAR},
      #{userUuid,jdbcType=VARCHAR}, #{songId,jdbcType=VARCHAR}, #{songName,jdbcType=VARCHAR},
      #{songCover,jdbcType=VARCHAR}, #{singer,jdbcType=VARCHAR}, #{singerCover,jdbcType=VARCHAR},
      #{songTime,jdbcType=BIGINT}, #{channel,jdbcType=TINYINT}, #{status,jdbcType=TINYINT},
      #{setTopTime,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.netease.nemo.entlive.model.po.OrderSong" useGeneratedKeys="true">
    insert into order_song
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="liveRecordId != null">
        live_record_id,
      </if>
      <if test="roomArchiveId != null">
        room_archive_id,
      </if>
      <if test="roomUuid != null">
        room_uuid,
      </if>
      <if test="userUuid != null">
        user_uuid,
      </if>
      <if test="songId != null">
        song_id,
      </if>
      <if test="songName != null">
        song_name,
      </if>
      <if test="songCover != null">
        song_cover,
      </if>
      <if test="singer != null">
        singer,
      </if>
      <if test="singerCover != null">
        singer_cover,
      </if>
      <if test="songTime != null">
        song_time,
      </if>
      <if test="channel != null">
        channel,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="setTopTime != null">
        set_top_time,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="liveRecordId != null">
        #{liveRecordId,jdbcType=BIGINT},
      </if>
      <if test="roomArchiveId != null">
        #{roomArchiveId,jdbcType=VARCHAR},
      </if>
      <if test="roomUuid != null">
        #{roomUuid,jdbcType=VARCHAR},
      </if>
      <if test="userUuid != null">
        #{userUuid,jdbcType=VARCHAR},
      </if>
      <if test="songId != null">
        #{songId,jdbcType=VARCHAR},
      </if>
      <if test="songName != null">
        #{songName,jdbcType=VARCHAR},
      </if>
      <if test="songCover != null">
        #{songCover,jdbcType=VARCHAR},
      </if>
      <if test="singer != null">
        #{singer,jdbcType=VARCHAR},
      </if>
      <if test="singerCover != null">
        #{singerCover,jdbcType=VARCHAR},
      </if>
      <if test="songTime != null">
        #{songTime,jdbcType=BIGINT},
      </if>
      <if test="channel != null">
        #{channel,jdbcType=TINYINT},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="setTopTime != null">
        #{setTopTime,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.netease.nemo.entlive.model.po.OrderSong">
    update order_song
    <set>
      <if test="liveRecordId != null">
        live_record_id = #{liveRecordId,jdbcType=BIGINT},
      </if>
      <if test="roomArchiveId != null">
        room_archive_id = #{roomArchiveId,jdbcType=VARCHAR},
      </if>
      <if test="roomUuid != null">
        room_uuid = #{roomUuid,jdbcType=VARCHAR},
      </if>
      <if test="userUuid != null">
        user_uuid = #{userUuid,jdbcType=VARCHAR},
      </if>
      <if test="songId != null">
        song_id = #{songId,jdbcType=VARCHAR},
      </if>
      <if test="songName != null">
        song_name = #{songName,jdbcType=VARCHAR},
      </if>
      <if test="songCover != null">
        song_cover = #{songCover,jdbcType=VARCHAR},
      </if>
      <if test="singer != null">
        singer = #{singer,jdbcType=VARCHAR},
      </if>
      <if test="singerCover != null">
        singer_cover = #{singerCover,jdbcType=VARCHAR},
      </if>
      <if test="songTime != null">
        song_time = #{songTime,jdbcType=BIGINT},
      </if>
      <if test="channel != null">
        channel = #{channel,jdbcType=TINYINT},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="setTopTime != null">
        set_top_time = #{setTopTime,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.netease.nemo.entlive.model.po.OrderSong">
      update order_song
      set live_record_id = #{liveRecordId,jdbcType=BIGINT},
      room_archive_id = #{roomArchiveId,jdbcType=VARCHAR},
      room_uuid = #{roomUuid,jdbcType=VARCHAR},
      user_uuid = #{userUuid,jdbcType=VARCHAR},
      song_id = #{songId,jdbcType=VARCHAR},
      song_name = #{songName,jdbcType=VARCHAR},
      song_cover = #{songCover,jdbcType=VARCHAR},
      singer = #{singer,jdbcType=VARCHAR},
      singer_cover = #{singerCover,jdbcType=VARCHAR},
      song_time = #{songTime,jdbcType=BIGINT},
      channel = #{channel,jdbcType=TINYINT},
      status = #{status,jdbcType=TINYINT},
      set_top_time = #{setTopTime,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
      where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="selectByLiveRecordId" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from order_song
    where live_record_id = #{liveRecordId,jdbcType=BIGINT}
    and status != -1 order by set_top_time desc, id asc
  </select>

  <select id="selectByLiveRecordIdAndUserId" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from order_song
    where live_record_id = #{liveRecordId,jdbcType=BIGINT}
    and user_uuid = #{userUuid,jdbcType=VARCHAR}
    and status != -1  order by set_top_time desc, id asc
  </select>

  <update id="cleanOrderSongs">
    update order_song
    set
    status = -1
    where live_record_id = #{liveRecordId,jdbcType=BIGINT}
  </update>

  <update id="cleanOrderSongsByUserUuid">
    update order_song
    set status = -1
    where live_record_id = #{liveRecordId,jdbcType=BIGINT} and user_uuid = #{userUuid,jdbcType=VARCHAR}
  </update>

  <select id="selectOrderSongCount" resultType="int">
    select
    count(id)
    from order_song
    where live_record_id = #{liveRecordId,jdbcType=BIGINT}
    and status != -1
  </select>

  <select id="selectUserOrderSongCount" resultType="int">
    select
    count(id)
    from order_song
    where live_record_id = #{liveRecordId,jdbcType=BIGINT}
    and user_uuid = #{userUuid,jdbcType=VARCHAR}
    and status != -1
  </select>

</mapper>